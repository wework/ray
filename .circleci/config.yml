version: 2.1

machine:
  pre:
    - mkdir ~/.yarn-cache

dependencies:
  pre:
    - curl -o- -L https://yarnpkg.com/install.sh | bash
  cache_directories:
    - ~/.yarn-cache
  override:
    - yarn install

executors:
  docker-config:
    docker:
      - image: circleci/node:10.13.0

commands:
  bootstrap:
    steps:
      - run:
          name: 'Install NPM deps and bootstrap Lerna'
          command: yarn bootstrap
  get_npm_packages_cache:
    description: 'Restore NPM packages'
    steps:
      - restore_cache:
          key: dependency-cache-{{ checksum "yarn.lock" }}
  save_npm_packages_cache:
    description: 'Cache NPM packages'
    steps:
      - save_cache:
          key: dependency-cache-{{ checksum "yarn.lock" }}
          paths:
            - node_modules
            - packages/core/node_modules
            - packages/docs-app/node_modules
            - packages/rehype-react/node_modules
  npm_authenticate:
    description: 'Adding npm authentication'
    steps:
      - run:
          name: 'Add NPM config with authToken to machine'
          command: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc

jobs:
  checkout-code:
    executor:
      name: docker-config
    steps:
      - checkout
      - attach_workspace: { at: '.' }
      - get_npm_packages_cache
      - bootstrap
      - run:
          name: Check if yarn.lock changed during install
          command: git diff --exit-code
      - save_npm_packages_cache
      - persist_to_workspace:
          root: '.'
          paths: [node_modules, packages/*/node_modules]

  test-unit:
    executor:
      name: docker-config
    steps:
      - checkout
      - attach_workspace: { at: '.' }
      - get_npm_packages_cache
      - run:
          name: Build packages
          command: yarn build
      - run:
          name: Run unit tests
          command: yarn test --coverage
      - run:
          name: Ship test coverage report to coveralls
          command: yarn coveralls

  test-visual-regression:
    executor:
      name: docker-config
    steps:
      - checkout
      - attach_workspace: { at: '.' }
      - get_npm_packages_cache
      - run:
          name: Run visual regression tests
          command: yarn lerna run chromatic --scope="@wework/ray-core" --parallel

  build:
    executor:
      name: docker-config
    steps:
      - checkout
      - attach_workspace: { at: '.' }
      - get_npm_packages_cache
      - run:
          name: 'Build packages'
          command: yarn build

  build_and_release:
    executor:
      name: docker-config
    steps:
      - add_ssh_keys:
          fingerprints:
            - 'f2:ad:87:6b:39:67:71:e0:7e:4e:2a:63:bd:4e:65:1a'
      - checkout
      - attach_workspace: { at: '.' }
      - get_npm_packages_cache
      - run:
          name: 'Build packages'
          command: yarn build
      - run:
          name: 'Configure github user details for publish commit'
          command: git config --global user.email "dg-engineering@wework.com" && git config --global user.name "Ray Bot"
      - npm_authenticate
      - run:
          name: 'Publish release to NPM registry'
          command: yarn lerna:publish

  graduate_master_to_production:
    executor:
      name: docker-config
    steps:
      - checkout
      - run:
          name: 'Deploy'
          command: git push origin master:production

workflows:
  version: 2
  'ray-ci-cd':
    jobs:
      - checkout-code:
          filters:
            branches:
              ignore:
                - production
      - test-unit:
          requires:
            - checkout-code
          filters:
            branches:
              ignore:
                - production
      - test-visual-regression:
          requires:
            - checkout-code
          filters:
            branches:
              ignore:
                - production
      - build:
          requires:
            - checkout-code
          filters:
            branches:
              ignore:
                - master
                - production
      - build_and_release:
          requires:
            - test-unit
            - test-visual-regression
          filters:
            branches:
              only:
                - master
      - graduate_master_to_production:
          requires:
            - build_and_release
          filters:
            branches:
              only:
                - master
